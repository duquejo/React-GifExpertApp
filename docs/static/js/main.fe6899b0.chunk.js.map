{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","process","fetch","response","json","data","gifs","map","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categories","propTypes","PropTypes","func","isRequired","ReactDOM","render","document","getElementById"],"mappings":"oMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAqCC,mBAAS,IAA9C,mBAAQC,EAAR,KAAoBC,EAApB,KAkBA,OACE,sBAAMC,SAba,SAAEC,GAErBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAe,MAKjB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SArBoB,SAAEP,GAC1BF,EAAeE,EAAEQ,OAAOF,QAqBpBG,YAAY,0D,QC1BPC,EAAc,SAAC,GAAyB,EAAtBC,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IACxC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,kCAAMA,GAAS,WAAf,W,uBCNOK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,mFAIfN,EAJe,iDAIkCO,UAAWF,GAJ7C,6BAI8EG,oCAJ9E,SAMEC,MAAOT,GANT,cAMfU,EANe,gBAOEA,EAASC,OAPX,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAK,YAA4B,IAAzBhB,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOgB,EAAa,EAAbA,OACnC,MAAO,CACLjB,KACAC,QACAC,IAAG,OAAEe,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBhB,QAbb,kBAiBda,GAjBc,4CAAH,sDCIPI,EAAU,SAAC,GAAoB,IAAjBZ,EAAgB,EAAhBA,SAEzB,ECE0B,SAAEA,GAO5B,MAA0BtB,mBAAS,CACjC6B,KAAM,GACNM,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAbAC,qBAAW,WAETjB,EAASC,GAAWiB,MAAM,SAAAC,GAExBH,EAAS,CACPR,KAAMW,EACNL,SAAS,SAKX,CAAEb,IAECc,ED9B0BK,CAAcnB,GAAlCU,EAAb,EAAQH,KAAaM,EAArB,EAAqBA,QAErB,OACE,qCACE,qBAAIjB,UAAU,oCAAd,cAAqDI,EAArD,OACEa,GAAW,2CACb,qBAAKjB,UAAU,YAAf,SAEIc,EAAOD,KAAK,SAAAW,GAAG,OAAI,cAAC,EAAD,eAAiCA,GAAdA,EAAI3B,a,OETvC4B,EAAe,WAE1B,MAAsC3C,mBAAU,CAAE,kBAAlD,mBAAQ4C,EAAR,KAAoB7C,EAApB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEI6C,EAAWb,KAAK,SAAAT,GAAQ,OAAI,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,YAUrDxB,EAAY+C,UAAY,CACtB9C,c,OAAe+C,EAAUC,KAAKC,Y,YCpBhCC,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.fe6899b0.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n  const [ inputValue, setInputValue] = useState(''); // ''\r\n\r\n  const handleInputChange = ( e ) => {\r\n    setInputValue( e.target.value ); // Setting Input event\r\n  };\r\n\r\n  const handleSubmit = ( e ) => {\r\n    \r\n    e.preventDefault();\r\n    // Greater than 2 value\r\n\r\n    if( inputValue.trim().length > 2 ) {\r\n      // setCategories( [...categories, 'Fullmetal Alchemist'] );\r\n      setCategories( cats => [ inputValue, ...cats ] ); // Callback with the last state\r\n      setInputValue( '' );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      <input \r\n        type=\"text\"\r\n        value={ inputValue }\r\n        onChange={ handleInputChange }\r\n        placeholder=\"Type something and press 'enter' for giphy search!\"\r\n      />\r\n    </form>\r\n  );\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={ url } alt={ title } />\r\n      <p> { title || 'No title' } </p>\r\n    </div>\r\n  );\r\n};","export const getGifs = async ( category ) => {\r\n  \r\n  if( process.env.REACT_APP_GIPHY_KEY === '' ) return;\r\n\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=${ process.env.REACT_APP_GIPHY_KEY }`;\r\n\r\n  const response = await fetch( url );\r\n  const { data } = await response.json();\r\n\r\n  const gifs = data.map( ({ id, title, images }) => {\r\n    return {\r\n      id,\r\n      title,\r\n      url: images?.downsized_medium.url\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};","\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n  const { data:images, loading } = useFetchGifs( category );\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n      { loading && <p>Loading...</p> }\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map( img => <GifGridItem key={ img.id } { ...img } /> ) // Sending all properties with Object Rest operator\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};","/**\r\n * \r\n * use 'prefix' is for hooks indication.\r\n */\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n  /**\r\n   * useEffect updates the state conditionally\r\n   * useState updates all the component\r\n   */\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  /**\r\n   * The effects always expects to be synchronous\r\n   */\r\n  useEffect( () => {\r\n\r\n    getGifs( category ).then( imgs => {\r\n\r\n      setState({\r\n        data: imgs,\r\n        loading: false\r\n      });\r\n        \r\n    });\r\n\r\n  },  [ category ] ); // If the dependencies list is empty, It's only fired ONCE (ComponentDidMount)\r\n\r\n  return state; // { data:[], loading: true }\r\n};","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n  const [ categories, setCategories ] = useState( [ 'One punch man' ] );\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={ setCategories }/>\r\n      <hr/>\r\n      <ol>\r\n        { \r\n          categories.map( category => <GifGrid key={ category } category={ category }/> )\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\n/**\r\n * Required Component Rule\r\n */\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root') );"],"sourceRoot":""}